function [par,temp_UETX_dis]=DistanceCompute(par,tra,rec,users)
% This function computes the distance between each pair of transmit and 
%      receive antennas

temp_UETX_dis.X=zeros(users.num*rec.totalNum,tra.totalNum);
temp_UETX_dis.Y=zeros(users.num*rec.totalNum,tra.totalNum);

for index_user=1:users.num 
    temp_UETX_dis.Z=users.start.z(index_user);
    temp_users_coordX=users.start.h(index_user):rec.indi.x...
        :users.start.h(index_user)+(rec.num_x-1)*rec.indi.x;
    users.coordinateX(index_user,:)=kron(ones(1,rec.num_y),...
        temp_users_coordX);
    temp_users_coordY=users.start.v(index_user):rec.indi.y...
        :users.start.v(index_user)+(rec.num_y-1)*rec.indi.y; 
    users.coordinateY(index_user,:)=kron(temp_users_coordY,...
        ones(1,rec.num_x));
    % The distance between each user and the transmitter
    temp_UETX_dis.X((index_user-1)*rec.totalNum+1:index_user...
        *rec.totalNum,:)=bsxfun(@minus,tra.coordinateX,...
        users.coordinateX(index_user,:).');
    temp_UETX_dis.Y((index_user-1)*rec.totalNum+1:index_user...
        *rec.totalNum,:)=bsxfun(@minus,tra.coordinateY,...
        users.coordinateY(index_user,:).');
    temp_UETX=sqrt(temp_UETX_dis.X((index_user-1)*rec.totalNum...
        +1:index_user*rec.totalNum,:).^2+temp_UETX_dis.Y((index_user-1)...
        *rec.totalNum+1:index_user*rec.totalNum,:).^2 ...
        +temp_UETX_dis.Z.^2);
    par.UETX.distance((index_user-1)*rec.totalNum+1:index_user...
        *rec.totalNum,:)=temp_UETX;
end



end